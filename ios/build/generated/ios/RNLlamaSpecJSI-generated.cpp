/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleCpp.js
 */

#include "RNLlamaSpecJSI.h"

namespace facebook::react {

static jsi::Value __hostFunction_NativeRNLlamaCxxSpecJSI_toggleNativeLog(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNLlamaCxxSpecJSI *>(&turboModule)->toggleNativeLog(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asBool()
  );
}
static jsi::Value __hostFunction_NativeRNLlamaCxxSpecJSI_setContextLimit(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNLlamaCxxSpecJSI *>(&turboModule)->setContextLimit(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeRNLlamaCxxSpecJSI_modelInfo(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNLlamaCxxSpecJSI *>(&turboModule)->modelInfo(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 || args[1].isUndefined() ? std::nullopt : std::make_optional(args[1].asObject(rt).asArray(rt))
  );
}
static jsi::Value __hostFunction_NativeRNLlamaCxxSpecJSI_initContext(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNLlamaCxxSpecJSI *>(&turboModule)->initContext(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeRNLlamaCxxSpecJSI_getFormattedChat(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNLlamaCxxSpecJSI *>(&turboModule)->getFormattedChat(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt),
    count <= 2 || args[2].isUndefined() ? std::nullopt : std::make_optional(args[2].asString(rt)),
    count <= 3 || args[3].isUndefined() ? std::nullopt : std::make_optional(args[3].asObject(rt))
  );
}
static jsi::Value __hostFunction_NativeRNLlamaCxxSpecJSI_loadSession(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNLlamaCxxSpecJSI *>(&turboModule)->loadSession(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeRNLlamaCxxSpecJSI_saveSession(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNLlamaCxxSpecJSI *>(&turboModule)->saveSession(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asNumber()
  );
}
static jsi::Value __hostFunction_NativeRNLlamaCxxSpecJSI_completion(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNLlamaCxxSpecJSI *>(&turboModule)->completion(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeRNLlamaCxxSpecJSI_stopCompletion(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNLlamaCxxSpecJSI *>(&turboModule)->stopCompletion(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeRNLlamaCxxSpecJSI_tokenize(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNLlamaCxxSpecJSI *>(&turboModule)->tokenize(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeRNLlamaCxxSpecJSI_detokenize(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNLlamaCxxSpecJSI *>(&turboModule)->detokenize(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asArray(rt)
  );
}
static jsi::Value __hostFunction_NativeRNLlamaCxxSpecJSI_embedding(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNLlamaCxxSpecJSI *>(&turboModule)->embedding(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeRNLlamaCxxSpecJSI_bench(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNLlamaCxxSpecJSI *>(&turboModule)->bench(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber(),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asNumber(),
    count <= 3 ? throw jsi::JSError(rt, "Expected argument in position 3 to be passed") : args[3].asNumber(),
    count <= 4 ? throw jsi::JSError(rt, "Expected argument in position 4 to be passed") : args[4].asNumber()
  );
}
static jsi::Value __hostFunction_NativeRNLlamaCxxSpecJSI_applyLoraAdapters(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNLlamaCxxSpecJSI *>(&turboModule)->applyLoraAdapters(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asArray(rt)
  );
}
static jsi::Value __hostFunction_NativeRNLlamaCxxSpecJSI_removeLoraAdapters(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNLlamaCxxSpecJSI *>(&turboModule)->removeLoraAdapters(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeRNLlamaCxxSpecJSI_getLoadedLoraAdapters(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNLlamaCxxSpecJSI *>(&turboModule)->getLoadedLoraAdapters(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeRNLlamaCxxSpecJSI_releaseContext(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNLlamaCxxSpecJSI *>(&turboModule)->releaseContext(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeRNLlamaCxxSpecJSI_releaseAllContexts(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNLlamaCxxSpecJSI *>(&turboModule)->releaseAllContexts(
    rt
  );
}

NativeRNLlamaCxxSpecJSI::NativeRNLlamaCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("RNLlama", jsInvoker) {
  methodMap_["toggleNativeLog"] = MethodMetadata {1, __hostFunction_NativeRNLlamaCxxSpecJSI_toggleNativeLog};
  methodMap_["setContextLimit"] = MethodMetadata {1, __hostFunction_NativeRNLlamaCxxSpecJSI_setContextLimit};
  methodMap_["modelInfo"] = MethodMetadata {2, __hostFunction_NativeRNLlamaCxxSpecJSI_modelInfo};
  methodMap_["initContext"] = MethodMetadata {2, __hostFunction_NativeRNLlamaCxxSpecJSI_initContext};
  methodMap_["getFormattedChat"] = MethodMetadata {4, __hostFunction_NativeRNLlamaCxxSpecJSI_getFormattedChat};
  methodMap_["loadSession"] = MethodMetadata {2, __hostFunction_NativeRNLlamaCxxSpecJSI_loadSession};
  methodMap_["saveSession"] = MethodMetadata {3, __hostFunction_NativeRNLlamaCxxSpecJSI_saveSession};
  methodMap_["completion"] = MethodMetadata {2, __hostFunction_NativeRNLlamaCxxSpecJSI_completion};
  methodMap_["stopCompletion"] = MethodMetadata {1, __hostFunction_NativeRNLlamaCxxSpecJSI_stopCompletion};
  methodMap_["tokenize"] = MethodMetadata {2, __hostFunction_NativeRNLlamaCxxSpecJSI_tokenize};
  methodMap_["detokenize"] = MethodMetadata {2, __hostFunction_NativeRNLlamaCxxSpecJSI_detokenize};
  methodMap_["embedding"] = MethodMetadata {3, __hostFunction_NativeRNLlamaCxxSpecJSI_embedding};
  methodMap_["bench"] = MethodMetadata {5, __hostFunction_NativeRNLlamaCxxSpecJSI_bench};
  methodMap_["applyLoraAdapters"] = MethodMetadata {2, __hostFunction_NativeRNLlamaCxxSpecJSI_applyLoraAdapters};
  methodMap_["removeLoraAdapters"] = MethodMetadata {1, __hostFunction_NativeRNLlamaCxxSpecJSI_removeLoraAdapters};
  methodMap_["getLoadedLoraAdapters"] = MethodMetadata {1, __hostFunction_NativeRNLlamaCxxSpecJSI_getLoadedLoraAdapters};
  methodMap_["releaseContext"] = MethodMetadata {1, __hostFunction_NativeRNLlamaCxxSpecJSI_releaseContext};
  methodMap_["releaseAllContexts"] = MethodMetadata {0, __hostFunction_NativeRNLlamaCxxSpecJSI_releaseAllContexts};
}


} // namespace facebook::react
