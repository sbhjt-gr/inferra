/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#import "RNLlamaSpec.h"


@implementation NativeRNLlamaSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end

@implementation RCTCxxConvert (NativeRNLlama_NativeContextParamsLora_listElement)
+ (RCTManagedPointer *)JS_NativeRNLlama_NativeContextParamsLora_listElement:(id)json
{
  return facebook::react::managedPointer<JS::NativeRNLlama::NativeContextParamsLora_listElement>(json);
}
@end
@implementation RCTCxxConvert (NativeRNLlama_NativeContextParams)
+ (RCTManagedPointer *)JS_NativeRNLlama_NativeContextParams:(id)json
{
  return facebook::react::managedPointer<JS::NativeRNLlama::NativeContextParams>(json);
}
@end
@implementation RCTCxxConvert (NativeRNLlama_SpecGetFormattedChatParams)
+ (RCTManagedPointer *)JS_NativeRNLlama_SpecGetFormattedChatParams:(id)json
{
  return facebook::react::managedPointer<JS::NativeRNLlama::SpecGetFormattedChatParams>(json);
}
@end
@implementation RCTCxxConvert (NativeRNLlama_NativeCompletionParamsGrammar_triggersElement)
+ (RCTManagedPointer *)JS_NativeRNLlama_NativeCompletionParamsGrammar_triggersElement:(id)json
{
  return facebook::react::managedPointer<JS::NativeRNLlama::NativeCompletionParamsGrammar_triggersElement>(json);
}
@end
@implementation RCTCxxConvert (NativeRNLlama_NativeCompletionParams)
+ (RCTManagedPointer *)JS_NativeRNLlama_NativeCompletionParams:(id)json
{
  return facebook::react::managedPointer<JS::NativeRNLlama::NativeCompletionParams>(json);
}
@end
@implementation RCTCxxConvert (NativeRNLlama_NativeEmbeddingParams)
+ (RCTManagedPointer *)JS_NativeRNLlama_NativeEmbeddingParams:(id)json
{
  return facebook::react::managedPointer<JS::NativeRNLlama::NativeEmbeddingParams>(json);
}
@end
namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeRNLlamaSpecJSI_toggleNativeLog(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "toggleNativeLog", @selector(toggleNativeLog:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNLlamaSpecJSI_setContextLimit(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "setContextLimit", @selector(setContextLimit:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNLlamaSpecJSI_modelInfo(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "modelInfo", @selector(modelInfo:skip:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNLlamaSpecJSI_initContext(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "initContext", @selector(initContext:params:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNLlamaSpecJSI_getFormattedChat(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getFormattedChat", @selector(getFormattedChat:messages:chatTemplate:params:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNLlamaSpecJSI_loadSession(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "loadSession", @selector(loadSession:filepath:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNLlamaSpecJSI_saveSession(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "saveSession", @selector(saveSession:filepath:size:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNLlamaSpecJSI_completion(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "completion", @selector(completion:params:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNLlamaSpecJSI_stopCompletion(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "stopCompletion", @selector(stopCompletion:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNLlamaSpecJSI_tokenize(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "tokenize", @selector(tokenize:text:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNLlamaSpecJSI_detokenize(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "detokenize", @selector(detokenize:tokens:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNLlamaSpecJSI_embedding(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "embedding", @selector(embedding:text:params:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNLlamaSpecJSI_bench(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "bench", @selector(bench:pp:tg:pl:nr:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNLlamaSpecJSI_applyLoraAdapters(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "applyLoraAdapters", @selector(applyLoraAdapters:loraAdapters:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNLlamaSpecJSI_removeLoraAdapters(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "removeLoraAdapters", @selector(removeLoraAdapters:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNLlamaSpecJSI_getLoadedLoraAdapters(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getLoadedLoraAdapters", @selector(getLoadedLoraAdapters:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNLlamaSpecJSI_releaseContext(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "releaseContext", @selector(releaseContext:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNLlamaSpecJSI_releaseAllContexts(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "releaseAllContexts", @selector(releaseAllContexts:reject:), args, count);
    }

  NativeRNLlamaSpecJSI::NativeRNLlamaSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["toggleNativeLog"] = MethodMetadata {1, __hostFunction_NativeRNLlamaSpecJSI_toggleNativeLog};
        
        
        methodMap_["setContextLimit"] = MethodMetadata {1, __hostFunction_NativeRNLlamaSpecJSI_setContextLimit};
        
        
        methodMap_["modelInfo"] = MethodMetadata {2, __hostFunction_NativeRNLlamaSpecJSI_modelInfo};
        
        
        methodMap_["initContext"] = MethodMetadata {2, __hostFunction_NativeRNLlamaSpecJSI_initContext};
        setMethodArgConversionSelector(@"initContext", 1, @"JS_NativeRNLlama_NativeContextParams:");
        
        methodMap_["getFormattedChat"] = MethodMetadata {4, __hostFunction_NativeRNLlamaSpecJSI_getFormattedChat};
        setMethodArgConversionSelector(@"getFormattedChat", 3, @"JS_NativeRNLlama_SpecGetFormattedChatParams:");
        
        methodMap_["loadSession"] = MethodMetadata {2, __hostFunction_NativeRNLlamaSpecJSI_loadSession};
        
        
        methodMap_["saveSession"] = MethodMetadata {3, __hostFunction_NativeRNLlamaSpecJSI_saveSession};
        
        
        methodMap_["completion"] = MethodMetadata {2, __hostFunction_NativeRNLlamaSpecJSI_completion};
        setMethodArgConversionSelector(@"completion", 1, @"JS_NativeRNLlama_NativeCompletionParams:");
        
        methodMap_["stopCompletion"] = MethodMetadata {1, __hostFunction_NativeRNLlamaSpecJSI_stopCompletion};
        
        
        methodMap_["tokenize"] = MethodMetadata {2, __hostFunction_NativeRNLlamaSpecJSI_tokenize};
        
        
        methodMap_["detokenize"] = MethodMetadata {2, __hostFunction_NativeRNLlamaSpecJSI_detokenize};
        
        
        methodMap_["embedding"] = MethodMetadata {3, __hostFunction_NativeRNLlamaSpecJSI_embedding};
        setMethodArgConversionSelector(@"embedding", 2, @"JS_NativeRNLlama_NativeEmbeddingParams:");
        
        methodMap_["bench"] = MethodMetadata {5, __hostFunction_NativeRNLlamaSpecJSI_bench};
        
        
        methodMap_["applyLoraAdapters"] = MethodMetadata {2, __hostFunction_NativeRNLlamaSpecJSI_applyLoraAdapters};
        
        
        methodMap_["removeLoraAdapters"] = MethodMetadata {1, __hostFunction_NativeRNLlamaSpecJSI_removeLoraAdapters};
        
        
        methodMap_["getLoadedLoraAdapters"] = MethodMetadata {1, __hostFunction_NativeRNLlamaSpecJSI_getLoadedLoraAdapters};
        
        
        methodMap_["releaseContext"] = MethodMetadata {1, __hostFunction_NativeRNLlamaSpecJSI_releaseContext};
        
        
        methodMap_["releaseAllContexts"] = MethodMetadata {0, __hostFunction_NativeRNLlamaSpecJSI_releaseAllContexts};
        
  }
} // namespace facebook::react
